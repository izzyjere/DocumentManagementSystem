@page "/"
@page "/login"
@layout LoginLayout

<EditForm FormName="Login" Model="Model" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />

    <MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>
    <!-- Heading for the Sign In page -->

    <MudTextField For="()=>Model.UserName" @bind-Value="Model.UserName" T="string" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>
    <!-- Text field for the user's email address -->

    <MudTextField For="()=>Model.Password" @bind-Value="Model.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
    <!-- Text field for the user's password with support for toggling password visibility -->

    <div Class="d-flex justify-space-between align-center">
        <MudCheckBox @bind-Checked="Model.RememberMe" T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
        <!-- Checkbox to remember the user's login -->

        <MudLink Href="/register">Create Account?</MudLink>
        <!-- Link to the "Forgot Password" page -->
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Size="Size.Large" FullWidth="true">Sign In</MudButton>
    <!-- Button to submit the login form -->

</EditForm>

@code {
    LoginRequest Model = new(); // Represents the login request model

    bool PasswordVisibility; // Indicates whether the password is visible or hidden
    InputType PasswordInput = InputType.Password; // Input type for the password field
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff; // Icon for the password visibility toggle

    void TogglePasswordVisibility()
    {
        // Toggles the password visibility and updates the input type and icon accordingly
        if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task LoginAsync()
    {
        Model.ReturnUrl = "dashboard"; // Sets the return URL after successful login

        var result = await authenticationService.LoginAsync(Model);
        // Calls the authentication service to perform the login

        if (!result.Succeeded)
        {
            snackBar.Add(result.Message, Severity.Error);
            // Displays an error message if login fails
        }
        else
        {
            NavManager.NavigateTo($"/login?key={result.Key}", true);
            // Navigates to the specified URL if login succeeds
        }
    }
}
