@page "/documents/libraries"
@using Microsoft.EntityFrameworkCore;
<PageTitle>RTSA || Libraries</PageTitle>
<MudGrid Justify="Justify.SpaceBetween">
    <MudItem xs="8">
        <h3>@pageContext</h3>
    </MudItem>
    <MudItem xs="2"></MudItem>
    <MudItem  xs="2">
        @if (Cabinet is not null)
        {   
            <MudButton  OnClick='async()=>await JavaScriptRuntime.InvokeVoidAsync("window.location.replace","/documents/libraries")' Style="text-transform:none" Color="Color.Info">View All Libraries</MudButton>
        }
    </MudItem>
</MudGrid>
<PageContent>
    <MudItem xs="12"><MudButton OnClick="Create" Variant="Variant.Outlined" FullWidth StartIcon="@Icons.Material.Filled.CreateNewFolder">Create a Library</MudButton></MudItem>
    <MudGrid Style="max-height:70vh; overflow:scroll;" Class="mt-6">
        @if (libraries.Any())
        {
            foreach (var library in libraries)
            {
                <MudItem xs="12" sm="6" md="4" Class="mb-4">
                    <MudPaper Style="border-radius:10px;">
                        <MudGrid>
                            <MudItem xs="5">
                                <MudIcon Color="Color.Info" Icon="@(library.HasFiles()?Icons.Custom.Uncategorized.FolderOpen:Icons.Custom.Uncategorized.Folder)" Style="height:150px; width:200px;"></MudIcon>
                            </MudItem>
                            <MudItem xs="7">
                                <MudText GutterBottom Class="mt-4 ml-3" Typo="Typo.h6">
                                    <b>@library.Name</b><br/>
                                    <MudChip @onclick='()=>NavManager.NavigateTo($"documents/libraries?cabinet={library.CabinetId}",true)' Label Icon="@Icons.Material.Outlined.Layers" Size="Size.Small">@library.Cabinet.Code</MudChip>
                                    <MudChip Label Icon="@Icons.Material.Outlined.Storage" Size="Size.Small">@library.Cabinet.FileStore.ShortName</MudChip>
                                </MudText>
                                <MudText @onclick='()=>NavManager.NavigateTo($"documents/files?library={library.Id}",true)' Style="cursor:pointer" Class="ml-3 mt-2" Typo="Typo.subtitle1">@(library.Documents?.Count??0) Files</MudText>
                                <MudText Color="Color.Info" GutterBottom Class="ml-3" Typo="Typo.caption">Created : @library.CreatedOn.ToString("dd MMM yy H:mm")</MudText>
                                <div Class="ml-3 mt-2">
                                    <MudItem xs="12">
                                        <MudButton OnClick="()=>Edit(library)" Style="text-transform:none;" Color="Color.Tertiary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Edit" Size="Size.Small">Edit</MudButton>
                                        <MudButton Class="ml-2" OnClick="()=>Trash(library)" Style="text-transform:none;" Color="Color.Error" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Delete" Size="Size.Small">Trash</MudButton>
                                    </MudItem>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        }
        else
        {

            <MudItem xs="12" Class="m-4">
                <MudAlert Severity="Severity.Warning">No Libraries Found.</MudAlert>
            </MudItem>
        }
    </MudGrid>
</PageContent>
@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "cabinet")]
    public string CabinetId { get; set; }
    string pageContext = "Libraries";
    Cabinet? Cabinet = null;
    IEnumerable<Library> libraries = Enumerable.Empty<Library>();
    protected override void OnInitialized()
    {
        LayoutService.Breadcrumbs.Clear();
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Dashboard", href: "dashboard", icon: Icons.Material.Outlined.Dashboard));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "File Stores", href: "documents/stores", icon: Icons.Material.Outlined.Dataset));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Cabinets", href: "documents/cabinets", icon: Icons.Material.Outlined.Layers));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Libraries", href: "documents/libraries", icon: Icons.Material.Outlined.FolderShared));
        LoadData();
    }
    void LoadData()
    {
        if (!string.IsNullOrEmpty(CabinetId))
        {
            Cabinet = cabinetService.GetAll().Include(x=>x.FileStore).FirstOrDefault(x=>x.Id==Guid.Parse(CabinetId));

            if (Cabinet is not null)
            {
                libraries = libraryService.GetAll()
                                         .Include(x => x.Documents)
                                         .Include(x => x.Cabinet)
                                         .Where(x => x.CabinetId == Cabinet.Id).ToList();
                pageContext = $"{Cabinet.FileStore.Name} : {Cabinet.Name} : Libraries";
            }


        }
        else
        {
            libraries = libraryService.GetAll()
                                         .Include(x => x.Documents)
                                         .Include(x => x.Cabinet).ToList();
        }
        StateHasChanged();
    }
    async void Create()
    {
        var dialog = dialogService.Show<CreateEditLibraryModal>("Create new library.", new DialogParameters { ["Cabinet"] = Cabinet });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            LoadData();
        }
    }
    async void Edit(Library record)
    {
        var dialog = dialogService.Show<CreateEditLibraryModal>($"Edit:  {record.Name}", new DialogParameters { ["Model"]=record, ["Cabinet"]=record.Cabinet, ["IsEditing"]=true });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            LoadData();
        }
    }
    async void Trash(Library record)
    {
        bool? confirm = await dialogService.ShowMessageBox(new MessageBoxOptions
            {
                CancelText = "Cancel",
                Title = $"Delete : {record.Name}",
                Message = "Are you sure you want to delete this library? This action is dangeous!",
                YesText = "Yes Delete"
            });
        if (confirm.HasValue && confirm.Value)
        {
            if (libraryService.Delete(record.Id))
            {
                snackBar.Add("Library Deleted. All files moved to archive.", Severity.Success);
                LoadData();
            }
            else
            {
                snackBar.Add("Library Delete Failed. Ensure that were files moved to archive.", Severity.Error);
            }
        }
    }
}
