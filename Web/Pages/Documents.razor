@page "/documents/files"
@using Microsoft.EntityFrameworkCore;
<MudGrid>
    <MudItem xs="8">
        <h3>@pageContext</h3>
    </MudItem>
    <MudItem xs="2"></MudItem>
    <MudItem xs="2">
        @if (Library is not null)
        {
            <MudButton OnClick='async()=>await JavaScriptRuntime.InvokeVoidAsync("window.location.replace","/documents/files")' Style="text-transform:none" Color="Color.Info">View All Files</MudButton>
        }
    </MudItem>
</MudGrid>
<PageContent PageTitle="Documents">
    <MudItem xs="12"><MudButton OnClick="Create" Variant="Variant.Outlined" FullWidth StartIcon="@Icons.Material.Filled.CreateNewFolder">Create a Document</MudButton></MudItem>
    <MudGrid Style="max-height:70vh; overflow:scroll;" Class="mt-6">
        @if (documents.Any())
        {
            foreach (var document in documents)
            {
                <MudItem xs="12" sm="6" md="4" Class="mb-4">
                    <MudPaper Style="border-radius:10px;">
                        <MudGrid>
                            <MudItem xs="5">
                                <MudIcon Color="Color.Tertiary" Icon="@Icons.Custom.FileFormats.FileDocument" Style="height:150px; width:200px;"></MudIcon>
                            </MudItem>
                            <MudItem xs="7">
                                <MudText GutterBottom Class="mt-4 ml-3" Typo="Typo.h6">
                                    <b>@document.Title</b><br />
                                    <MudChip @onclick='()=>NavManager.NavigateTo($"documents/files?library={document.LibraryId}",true)' Label Icon="@Icons.Material.Outlined.Layers" Size="Size.Small">@document.Library.Code</MudChip>
                                    <MudChip Label Icon="@Icons.Material.Outlined.Storage" Size="Size.Small">@document.Library.Cabinet.Code</MudChip>
                                </MudText>
                                <MudText @onclick='()=>NavManager.NavigateTo($"documents/files/view={document.Id}",true)' Style="cursor:pointer" Class="ml-3 mt-2" Typo="Typo.subtitle1">@(document.Pages?.Count??0) Pages</MudText>
                                <MudText Color="Color.Info" GutterBottom Class="ml-3" Typo="Typo.caption">Created On: @document.CreatedOn.ToString("dd MMM yy H:mm")</MudText>
                                <div Class="ml-3 mt-2">
                                    <MudItem xs="12">
                                        <MudButton OnClick='()=>NavManager.NavigateTo($"documents/files/view?id={document.Id}",true)' Style="text-transform:none;" Color="Color.Success" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.DocumentScanner" Size="Size.Small">View</MudButton>
                                        <MudButton Class="ml-2" OnClick="()=>Edit(document)" Style="text-transform:none;" Color="Color.Warning" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Edit" Size="Size.Small">Edit</MudButton>
                                    </MudItem>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        }
        else
        {

            <MudItem xs="12" Class="m-4">
                <MudAlert Severity="Severity.Warning">No Documents Found.</MudAlert>
            </MudItem>
        }
    </MudGrid>
</PageContent>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "library")]
    public string LibraryId { get; set; }
    string pageContext = "Files";
    Library? Library = null;
    IEnumerable<Document> documents = Enumerable.Empty<Document>();
    protected override void OnInitialized()
    {
        LayoutService.Breadcrumbs.Clear();
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Dashboard", href: "dashboard", icon: Icons.Material.Outlined.Dashboard));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "File Stores", href: "documents/stores", icon: Icons.Material.Outlined.Dataset));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Cabinets", href: "documents/cabinets", icon: Icons.Material.Outlined.Layers));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Libraries", href: "documents/libraries", icon: Icons.Material.Outlined.FolderShared));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Files", href: "documents/stores", icon: Icons.Material.Outlined.DocumentScanner));
        LoadData();
    }
    void LoadData()
    {
        if (!string.IsNullOrEmpty(LibraryId))
        {
            Library = libraryService.GetAll().Include(x => x.Cabinet)
                     .ThenInclude(c => c.FileStore)
                     .FirstOrDefault(x => x.Id==Guid.Parse(LibraryId));

            if (Library is not null)
            {
                documents = documentService.GetAll()
                                          .Include(d => d.Pages)
                                          .Include(d => d.Library)
                                          .ThenInclude(l => l.Cabinet)
                                          .ThenInclude(c => c.FileStore)
                                          .OrderByDescending(d => d.CreatedOn)
                                         .Where(x => x.LibraryId == Library.Id).ToList();
                pageContext = $"{Library.Cabinet.FileStore.Name} : {Library.Cabinet.Name} : {Library.Name} : Files";
            }


        }
        else
        {
            documents = documentService.GetAll()
                                         .Include(d => d.Pages)
                                          .Include(d => d.Library)
                                          .ThenInclude(l => l.Cabinet)
                                          .ThenInclude(c => c.FileStore)
                                          .OrderByDescending(d => d.CreatedOn).ToList();
        }
        StateHasChanged();
    }
    async void Create()
    {
        var dialog = dialogService.Show<CreateEditDocumentModal>("Create new document.", new DialogParameters { ["Library"] = Library }, new DialogOptions { FullWidth=true, MaxWidth=MaxWidth.Large, Position=DialogPosition.TopCenter });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            LoadData();
        }
    }
    async void Edit(Document record)
    {
        var dialog = dialogService.Show<CreateEditDocumentModal>($"Edit:  {record.Description}", new DialogParameters { ["Model"]=record, ["Library"]=record.Library, ["IsEditing"]=true }, new DialogOptions { FullWidth=true, MaxWidth=MaxWidth.Large, Position=DialogPosition.TopCenter });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            LoadData();
        }
    }
    async void Trash(Document record)
    {
        bool? confirm = await dialogService.ShowMessageBox(new MessageBoxOptions
            {
                CancelText = "Cancel",
                Title = $"Delete : {record.Description}",
                Message = "Are you sure you want to delete this document? This action is dangeous!",
                YesText = "Yes Delete"
            });
        if (confirm.HasValue && confirm.Value)
        {
            if (libraryService.Delete(record.Id))
            {
                snackBar.Add("Document Deleted. All files moved to archive.", Severity.Success);
                LoadData();
            }
            else
            {
                snackBar.Add("Document Delete Failed. Ensure that were files moved to archive.", Severity.Error);
            }
        }
    }
}
