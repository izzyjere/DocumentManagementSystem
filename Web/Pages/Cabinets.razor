@page "/documents/cabinets"
@using Microsoft.EntityFrameworkCore;
<MudGrid>
    <MudItem xs="8">
        <h3>@pageContext</h3>       
    </MudItem> 
    <MudItem xs="2"></MudItem>
    <MudItem xs="2">
        @if (Store is not null)
        {
            <MudButton OnClick='async()=>await JavaScriptRuntime.InvokeVoidAsync("window.location.replace","/documents/cabinets")' Style="text-transform:none" Color="Color.Info">View All Cabinets</MudButton>
        }
    </MudItem>
 </MudGrid>

<PageContent PageTitle="Cabinets">
    <MudItem xs="12"><MudButton OnClick="Create" Variant="Variant.Outlined" FullWidth StartIcon="@Icons.Material.Filled.CreateNewFolder">Create a Cabinet</MudButton></MudItem>
    <MudGrid Style="max-height:70vh; overflow:scroll;" Class="mt-6">
        @if (cabinets.Any())
        {
            foreach (var cabinet in cabinets)
            {
                <MudItem Class="mb-4" xs="12" sm="6" md="4">
                    <MudPaper Style="border-radius:10px;">
                        <MudGrid>
                            <MudItem xs="5">
                                <MudIcon Color="Color.Dark" Icon="@Icons.Material.Rounded.Layers" Style="height:150px; width:200px;"></MudIcon>
                            </MudItem>
                            <MudItem xs="7">
                                <MudText GutterBottom Class="mt-4 ml-3" Typo="Typo.h6">
                                    <b>@cabinet.Name</b><br/>
                                    <MudChip @onclick='()=>NavManager.NavigateTo($"documents/cabinets?store={cabinet.FileStoreId}",true)' Label Icon="@Icons.Material.Outlined.Storage" Size="Size.Small">@cabinet.FileStore.ShortName</MudChip>
                                </MudText>
                                <MudText @onclick='()=>NavManager.NavigateTo($"documents/libraries?cabinet={cabinet.Id}",true)' Style="cursor:pointer" Class="ml-3 mt-2" Typo="Typo.subtitle1">@(cabinet.Libraries?.Count??0) Libraries</MudText>
                                <MudText Color="Color.Info" GutterBottom Class="ml-3" Typo="Typo.caption">Created : @cabinet.CreatedOn.ToString("dd MMM yy H:mm")</MudText>
                                <div Class="ml-3 mt-2">
                                    <MudItem xs="12">
                                        <MudButton OnClick="()=>Edit(cabinet)" Style="text-transform:none;" Color="Color.Tertiary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Edit" Size="Size.Small">Edit</MudButton>
                                        <MudButton Class="ml-2" OnClick="()=>Trash(cabinet)" Style="text-transform:none;" Color="Color.Error" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Delete" Size="Size.Small">Trash</MudButton>
                                    </MudItem>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        }
        else
        {

            <MudItem xs="12" Class="m-4">
                <MudAlert Severity="Severity.Warning">No Cabinets Found.</MudAlert>
            </MudItem>
        }
    </MudGrid>
</PageContent>

@code {
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "store")]
    public string StoreId { get; set; }
    string pageContext = "Cabinets";
    FileStore? Store = null;
    IEnumerable<Cabinet> cabinets = Enumerable.Empty<Cabinet>();
    protected override void OnInitialized()
    {
        LayoutService.Breadcrumbs.Clear();
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Dashboard", href: "dashboard", icon: Icons.Material.Outlined.Dashboard));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "File Stores", href: "documents/stores", icon: Icons.Material.Outlined.Dataset));
        LayoutService.Breadcrumbs.Add(new BreadcrumbItem(text: "Cabinets", href: "documents/cabinets", icon: Icons.Material.Outlined.Layers));
        LoadData();

    }
    void LoadData()
    {
        if (!string.IsNullOrEmpty(StoreId))
        {
            Store = fileStoreService.GetById(Guid.Parse(StoreId));

            if (Store is not null)
            {
                cabinets = cabinetService.GetAll()
                                         .Include(x => x.Libraries)
                                         .Include(x => x.FileStore)
                                         .Where(x => x.FileStoreId == Store.Id).ToList();
                pageContext = $"{Store.Name} : Cabinets";
            }


        }
        else
        {
            cabinets = cabinetService.GetAll()
                                     .Include(x => x.Libraries)
                                     .Include(x => x.FileStore).ToList();
        }
        StateHasChanged();
    }
    async void Create()
    {
        var dialog = dialogService.Show<CreateEditCabinetModal>("Create new cabinet.", new DialogParameters { ["Store"] = Store });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            LoadData();
        }
    }
    async void Edit(Cabinet record)
    {
        var dialog = dialogService.Show<CreateEditCabinetModal>($"Edit:  {record.Name}", new DialogParameters { ["Model"]=record, ["Store"]=record.FileStore, ["IsEditing"]=true });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            LoadData();
        }
    }
    async void Trash(Cabinet record)
    {
        bool? confirm = await dialogService.ShowMessageBox(new MessageBoxOptions
            {
                CancelText = "Cancel",
                Title = $"Delete : {record.Name}",
                Message = "Are you sure you want to delete this cabinet? This action is dangeous!",
                YesText = "Yes Delete"
            });
        if (confirm.HasValue && confirm.Value)
        {
            if (cabinetService.Delete(record.Id))
            {
                snackBar.Add("Cabinet Deleted. All files moved to archive.", Severity.Success);
                LoadData();
            }
            else
            {
                snackBar.Add("Cabinet Delete Failed. Ensure that were files moved to archive.", Severity.Error);
            }
        }
    }
}
