@using Microsoft.EntityFrameworkCore;
<EditForm Model="@Model">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField Variant=Variant.Outlined For="()=>Model.Title" Label="Title" @bind-Value="Model.Title" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Variant=Variant.Outlined For="()=>Model.Description" Label="Description" @bind-Value="Model.Description" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Variant=Variant.Outlined For="()=>Model.Code" Label="Code" @bind-Value="Model.Code" />
                        </MudItem>
                        @if (Library is null)
                        {
                            <MudItem xs="12">
                                <MudSelect Variant=Variant.Outlined Label="FileStore" @bind-Value="fileStore">
                                    <MudSelectItem Value="default" T="FileStore">No filestore selected</MudSelectItem>
                                    @foreach (var item in fileStores)
                                    {
                                        <MudSelectItem Value="item">@item.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            @if (fileStore is not null)
                            {
                                <MudItem xs="12">
                                    <MudSelect Variant=Variant.Outlined Label="Cabinet" @bind-Value="cabinet">
                                        <MudSelectItem Value="default" T="Cabinet">No cabinet selected</MudSelectItem>
                                        @foreach (var item in fileStore.Cabinets)
                                        {
                                            <MudSelectItem Value="item">@item.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            }
                            @if (cabinet is not null)
                            {
                                <MudItem xs="12">
                                    <MudSelect For="()=>Model.LibraryId" Variant=Variant.Outlined Label="Library" @bind-Value="Model.LibraryId">
                                        <MudSelectItem Value="default" T="Guid">No library selected</MudSelectItem>
                                        @foreach (var item in cabinet.Libraries)
                                        {
                                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            }

                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudTextField Variant=Variant.Outlined ReadOnly Label="Library" Value="Library.Name" />
                            </MudItem>
                        }

                    </MudGrid>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudStack Style="width: 100%">
                        <MudFileUpload Context="uploadContext" T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                        @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                            <ButtonTemplate>
                                <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                                    <MudText Typo="Typo.h6">Drag and drop files here or click to upload</MudText>
                                    <MudList Clickable>
                                        @if (pageFiles.Any())
                                        {
                                            @foreach (var file in pageFiles)
                                            {
                                                <MudListItem Dense="true" Icon="@Icons.Custom.FileFormats.FileDocument">@file.Name</MudListItem>
                                            }

                                        }
                                        else
                                        {
                                            <MudAlert Class="m-4" Severity="Severity.Info">No Documents Uploaded</MudAlert>
                                        }

                                    </MudList>
                                </MudPaper>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudToolBar DisableGutters="true" Class="gap-4">
                            <MudButton OnClick="Upload" Disabled="@(!pageFiles.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
                            <MudButton OnClick="Clear" Disabled="@(!pageFiles.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
                        </MudToolBar>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="()=>Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Success">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();

    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public Document? Model { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public Library Library { get; set; }

    FileStore? fileStore = default;
    Cabinet? cabinet = default;

    IEnumerable<FileStore> fileStores = Enumerable.Empty<FileStore>();
    List<IBrowserFile> pageFiles = new List<IBrowserFile>();

    protected override void OnInitialized()
    {
        if (!IsEditing)
        {
            Model = new();
            Model.Pages = new();
        }else{}
        LoadData();
    }

    void LoadData()
    {
        if (Library is null)
        {
            fileStores = fileStoreService.GetAll()
                                         .Include(f => f.Cabinets)
                                         .ThenInclude(c => c.Libraries)
                                         .ToList();
        }
        else
        {
            fileStore = Library.Cabinet.FileStore;
        }
        StateHasChanged();
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {


        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            pageFiles.Add(file);
        }
        StateHasChanged();
    }

    private async Task Clear()
    {
        pageFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }
    private async Task Upload()
    {
        if (fileStore is null || Model.LibraryId == Guid.Empty)
        {
            snackBar.Add("No filestore choosen!", Severity.Error);
            return;
        }
        foreach (var file in pageFiles)
        {
            if (file.Size>20000000L)
            {
                snackBar.Add("File too big. Maximum size allowed is 20 mbs.", Severity.Error);
                return;
            }
            var fileStream = file.OpenReadStream(20000000L);
            var ms = new MemoryStream();
            await fileStream.CopyToAsync(ms);
            var result = await fileSystemService.WriteFileToStore(ms, fileStore.Path);
            if (!result.Succeeded)
            {
                snackBar.Add($"Failed to upload {file.Name}. Try again", Severity.Error);
                continue;
            }
            var page = new PageFile
                {
                    FileName = file.Name,
                    Format = Path.GetExtension(file.Name),
                    Path = result.Data,
                    DateUploaded = DateTime.Now
                };
            Model.Pages.Add(page);          
        }
        //Upload the files here
        snackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        snackBar.Add($"{pageFiles.Count}: Files uploaded!", Severity.Info);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
